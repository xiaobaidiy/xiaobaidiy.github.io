<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机械手臂一--旋转矩阵和变换矩阵的计算</title>
      <link href="/2020/05/05/robot-arm-2/"/>
      <url>/2020/05/05/robot-arm-2/</url>
      
        <content type="html"><![CDATA[<h1 id="旋转矩阵与转角的关系"><a href="#旋转矩阵与转角的关系" class="headerlink" title="旋转矩阵与转角的关系"></a>旋转矩阵与转角的关系</h1><p>上一讲中我们介绍了质点沿着某一坐标轴旋转的旋转矩阵的计算方法，但是在更普遍的情况下，质点的旋转并不是沿着某一坐标轴，而可能是空间中的任意轴。所以这一讲我们将介绍如何通过拆解为沿坐标轴旋转的方式来计算任意旋转矩阵。</p><p>拆解的方式有两种：</p><ol><li>Fixed angles – 根据一个固定不动的坐标系进行旋转</li><li>Euler angles – 对转动后的坐标系再此进行旋转</li></ol><h2 id="Fixed-angles"><a href="#Fixed-angles" class="headerlink" title="Fixed angles"></a>Fixed angles</h2><p>如下图所示，A frame是固定不变的坐标系，我们先沿着$\hat{X}$轴旋转$\gamma$角度，再沿着$\hat{Y}$轴旋转$\beta$角度，最后沿着$\hat{Z}$轴旋转$\alpha$角度得到了B frame。<br><img src="1.png" alt=""><br>旋转矩阵的计算方式如下：<br>$$<br>\begin{aligned}<br>&amp;^A_BR_{XYZ}(\gamma,\beta,\alpha) =<br>R_Z(\alpha)R_Y(\beta)R_X(\gamma) \\<br>&amp;=    \begin{bmatrix}<br>    c\alpha c\beta &amp; c\alpha s\beta s\gamma - s\alpha c\gamma &amp; c\alpha s\beta c\gamma + s\alpha s\gamma \\<br>    s\alpha c\beta &amp; s\alpha s\beta s\gamma + c\alpha c\gamma &amp; s\alpha s\beta c\gamma - c\alpha s\gamma \\<br>    -s\beta &amp; c\beta s\gamma &amp; c\beta c\gamma<br>    \end{bmatrix} \\<br>&amp;= \begin{bmatrix}<br>r_{11} &amp; r_{12} &amp; r_{13}  \\<br>r_{21} &amp; r_{22} &amp; r_{23}  \\<br>r_{31} &amp; r_{32} &amp; r_{33}  \\<br>\end{bmatrix}<br>\end{aligned}<br>$$</p><blockquote><p>Note: Fixed angles下，旋转矩阵采用的是左乘的方式计算。</p></blockquote><p>当我们已知旋转矩阵R时，怎么反推出来旋转的角度呢？根据$r_{31}$元素的值我们可以直接算出$\beta$角，然而$\beta$角的取值会有如下三种情况：<br>如果$\beta \neq \pm90^\circ$：<br>$$<br>\begin{aligned}<br>\beta &amp;= Atan2(-r_{31}, \sqrt{r_{11} ^2 + r_{21} ^2}) \\<br>\alpha &amp;= Atan2(r_{21}/c\beta, r_{11}/c\beta) \\<br>\gamma &amp;= Atan2(r_{32}/c\beta, r_{33}/c\beta)<br>\end{aligned}<br>$$<br>如果$\beta = 90^\circ$：<br>$$<br>\begin{aligned}<br>&amp;\alpha = 0^\circ \\<br>&amp;\gamma = Atan2(r_{12},r_{22})<br>\end{aligned}<br>$$<br>如果$\beta = -90^\circ$：<br>$$<br>\begin{aligned}<br>&amp;\alpha = 0^\circ \\<br>&amp;\gamma = -Atan2(r_{12},r_{22})<br>\end{aligned}<br>$$</p><blockquote><p>Note: 当$\beta \neq \pm90^\circ$时，$\alpha$和$\gamma$其实有多组解，这里我们给$\alpha$取$0^\circ$是为了方便计算</p></blockquote><h2 id="Euler-angles（Z-Y-X）"><a href="#Euler-angles（Z-Y-X）" class="headerlink" title="Euler angles（Z-Y-X）"></a>Euler angles（Z-Y-X）</h2><p>如下图所示，A frame是我们即将要旋转的坐标系，首先我们先沿着$\hat{Z}$轴旋转$\alpha$角度，再沿着旋转之后的坐标系的$\hat{Y}$轴旋转$\beta$角度，最后再沿着$\hat{X}$轴旋转$\gamma$角度得到了B frame。<br><img src="2.png" alt=""><br>旋转矩阵的计算方式如下：<br>$$<br>\begin{aligned}<br>&amp;^A_BR_{ZYX}(\alpha,\beta,\gamma) =<br>R_Z(\alpha)R_Y(\beta)R_X(\gamma) \\<br>&amp;=    \begin{bmatrix}<br>    c\alpha c\beta &amp; c\alpha s\beta s\gamma - s\alpha c\gamma &amp; c\alpha s\beta c\gamma + s\alpha s\gamma \\<br>    s\alpha c\beta &amp; s\alpha s\beta s\gamma + c\alpha c\gamma &amp; s\alpha s\beta c\gamma - c\alpha s\gamma \\<br>    -s\beta &amp; c\beta s\gamma &amp; c\beta c\gamma<br>    \end{bmatrix} \\<br>&amp;= \begin{bmatrix}<br>r_{11} &amp; r_{12} &amp; r_{13}  \\<br>r_{21} &amp; r_{22} &amp; r_{23}  \\<br>r_{31} &amp; r_{32} &amp; r_{33}  \\<br>\end{bmatrix}<br>\end{aligned}<br>$$</p><blockquote><p>Note: Euler angles下，旋转矩阵采用的是右乘的方式计算。</p></blockquote><p>我们发现与X-Y-Z fixed angle得到同样的旋转矩阵，所以Fix angle下以X-Y-Z来转就等于Eular angle下以Z-Y-X来转。因为旋转矩阵是一样的，那么反推旋转角度的计算方式和Fixed angle也是一样的。</p><h2 id="Euler-angles（Z-Y-Z）"><a href="#Euler-angles（Z-Y-Z）" class="headerlink" title="Euler angles（Z-Y-Z）"></a>Euler angles（Z-Y-Z）</h2><p>Euler angles还有一种旋转方式就是Z-Y-Z，即我们先沿着$\hat{Z}$轴旋转$\alpha$角度，再沿着旋转之后的坐标系的$\hat{Y}$轴旋转$\beta$角度，最后再沿着$\hat{Z}$轴旋转$\gamma$角度。如下图所示：<br><img src="3.png" alt=""><br>旋转矩阵的计算方式如下：<br>$$<br>\begin{aligned}<br>&amp;^A_BR_{ZYZ}(\alpha,\beta,\gamma) =<br>R_Z(\alpha)R_Y(\beta)R_Z(\gamma) \\<br>&amp;=    \begin{bmatrix}<br>    c\alpha c\beta c\gamma - s\alpha s\gamma &amp; -c\alpha c\beta s\gamma - s\alpha c\gamma &amp; c\alpha s\beta \\<br>    s\alpha c\beta c\gamma + c\alpha s\gamma &amp; -s\alpha c\beta s\gamma + c\alpha c\gamma &amp; s\alpha s\beta \\<br>    -s\beta c\gamma &amp; s\beta s\gamma &amp; c\beta<br>    \end{bmatrix} \\<br>&amp;= \begin{bmatrix}<br>r_{11} &amp; r_{12} &amp; r_{13}  \\<br>r_{21} &amp; r_{22} &amp; r_{23}  \\<br>r_{31} &amp; r_{32} &amp; r_{33}  \\<br>\end{bmatrix}<br>\end{aligned}<br>$$</p><blockquote><p>Note: Euler angles下，旋转矩阵采用的是右乘的方式计算。</p></blockquote><p>要计算旋转的角度，我们首先根据$r_{33}$元素的值算出$\beta$角，然而$\beta$角的取值依然会有如下三种情况：<br>如果$\beta \neq 0^\circ or 180^\circ$：<br>$$<br>\begin{aligned}<br>\beta &amp;= Atan2(\sqrt{r_{31} ^2 + r_{32} ^2}, r_{33} ) \\<br>\alpha &amp;= Atan2(r_{23}/s\beta, r_{13}/s\beta) \\<br>\gamma &amp;= Atan2(r_{32}/s\beta, -r_{31}/s\beta)<br>\end{aligned}<br>$$<br>如果$\beta = 0^\circ$：<br>$$<br>\begin{aligned}<br>&amp;\alpha = 0^\circ \\<br>&amp;\gamma = Atan2(-r_{12},r_{11})<br>\end{aligned}<br>$$<br>如果$\beta = 180^\circ$：<br>$$<br>\begin{aligned}<br>&amp;\alpha = 0^\circ \\<br>&amp;\gamma = -Atan2(r_{12},-r_{11})<br>\end{aligned}<br>$$</p><h1 id="Transformation-matrix"><a href="#Transformation-matrix" class="headerlink" title="Transformation matrix"></a>Transformation matrix</h1><p>因为刚体在空间中的状态有移动$\vec{P}$和转动$R$两种，为了方便计算我们需要将这两种状态整合到一个矩阵里计算，因此我们引入了变换矩阵：<br>$$<br>^A_BT=<br> \left[<br>\begin{array}{ccc|c}<br>  &amp;^A_BR_{3\times3}&amp;&amp;^AP_{B org 3\times1}\\<br>\hline<br>  0&amp;0&amp;0&amp;1<br>\end{array}<br>\right] _{4\times4}<br>$$</p><h2 id="Transformation-matrix的应用"><a href="#Transformation-matrix的应用" class="headerlink" title="Transformation matrix的应用"></a>Transformation matrix的应用</h2><p>Transformation matrix的应用有两种情况：一种是已知某个质点在一个坐标系的位置，通过两个坐标系的变换矩阵来计算这个质点在另一个坐标系的位置；另一种是在同一个坐标系下，计算某质点经过移动和旋转后的新的坐标。</p><p>在第一种情况下，例如，已知P点在B frame下的坐标，以及B frame对A frame的Transformation matrix，那么P点在A frame的坐标就是：<br>$$<br>\begin{bmatrix}<br>^AP \\<br>1<br>\end{bmatrix} =<br>\begin{bmatrix}<br>  &amp;^A_BR&amp;&amp;^AP \\<br>  0&amp;0&amp;0&amp;1<br>\end{bmatrix}<br>\begin{bmatrix}<br>^BP \\<br>1<br>\end{bmatrix} =<br>\begin{bmatrix}<br>^A_BR^BP+^AP_{Borg} \\<br>1<br>\end{bmatrix}<br>$$</p><blockquote><p>Note: Tranforamtion Matrix是可以连续操作的:$^A_BT=^A_CT^C_DT^D_BT$<br>这样的话，我们只要是知道任何坐标系之间的T，就可以知道任意点在不同坐标系下的坐标。</p></blockquote><p>在第二种情况下，如果质点是先转动再移动的话，那么计算方式和第一种情况相同，因为我们看最终P点在A frame下的表达式：$^AP_2 = R^AP_1+P$，P点先左乘R进行了转动，才加上偏移量进行了移动，只不过这里的P和R都是相对于自身坐标系来说的。如果是先移动再转动的话，表达式应该是这样：$^AP_2 = R(^AP_1+P)$，结果完全不同。</p><h2 id="Transformation-matrix的运算"><a href="#Transformation-matrix的运算" class="headerlink" title="Transformation matrix的运算"></a>Transformation matrix的运算</h2><ol><li>连续运算<br>$$<br>^AP=^A_BT^BP=^A_BT(^B_CT^CP)=^A_BT^B_CT^CP<br>$$</li><li>反矩阵（计算过程省略）</li></ol><p>$$<br>^A_BT^{-1}=<br>\begin{bmatrix}<br>  &amp;^A_BR^T&amp;&amp;-^A_BR^T{^AP_{Borg} } \\<br>  0&amp;0&amp;0&amp;1<br>\end{bmatrix}<br>$$</p><ol start="3"><li><p>连续运算，求未知T<br>已知$^U_DT=^U_AT^A_DT=^U_BT^B_CT^C_DT$，如图：<img src="4.png" alt=""><br>如果$^C_DT$不知道，那么<br>$$<br>^C_DT=(^U_BT^B_CT)^{-1}{^U_AT^A_DT}<br>$$</p></li><li><p>连续运算法则<br>假设有两个frame，A和B，然而B frame需要经过$T_1$，$T_2$，$T_3$三次按照转轴旋转和移动才能与A重合。那么，如果B frame是按照A frame的转轴旋转，$^A_BT=T_3T_2T_1I$，要按照左乘的规则，这就是前面讲的fixed angles的情况；如果B frame是按照B frame自身的转轴旋转，$^A_BT=IT_1T_2T_3$，要按照右乘的规则，这就是前面讲的Euler angles的情况。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机械手臂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械手臂 </tag>
            
            <tag> Robotic arm </tag>
            
            <tag> Rotation Matrix </tag>
            
            <tag> Transformation Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械手臂一--刚体的运动状态</title>
      <link href="/2020/05/04/robot-arm-1/"/>
      <url>/2020/05/04/robot-arm-1/</url>
      
        <content type="html"><![CDATA[<h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p>刚体在空间中的运动方式有两种，一种是移动，一种是转动，它们各有3个DOF。对于移动来说，它可以沿着$\hat{X}$轴，$\hat{Y}$轴和$\hat{Z}$轴移动， 同样的，转动也可以沿着$\hat{X}$轴，$\hat{Y}$轴和$\hat{Z}$轴进行转动。为了描述刚体在空间中的运动状态，我们通常会在它的质心位置建立一个坐标系（frame）, 通过得到这个坐标系与世界坐标系之间的关系，我们可以知道这个刚体在空间中的姿态。</p><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><p>刚体的移动可以用向量$\vec{P}$来描述，它即明确了移动的方向，又说明了移动的大小。如下图：<br><img src="1.png" alt=""><br>因为位置是相对的，为了表明$\vec{P}$是以A frame为基坐标上B frame的位置，我们通常写为$^AP_B org$，其中org指的是B frame的原点，即刚体的质心。</p><h1 id="转动"><a href="#转动" class="headerlink" title="转动"></a>转动</h1><p>刚体的转动需要用三个向量来描述，因此我们将它写成矩阵的形式，并将这个矩阵称之为旋转矩阵（Rotation Matrix），用$^A_BR$来表示（B frame相对于A frame）。$^A_BR$的三个columns其实是B frame的$\hat{X}$轴，$\hat{Y}$轴以及$\hat{Z}$轴方向的单位向量在A frame下的投影，因此旋转矩阵的三个cloumns的长度都为1。如图：<br><img src="2.png" alt=""></p><h2 id="旋转矩阵的特性"><a href="#旋转矩阵的特性" class="headerlink" title="旋转矩阵的特性"></a>旋转矩阵的特性</h2><p>旋转矩阵有如下特性：</p><ul><li>$^A_BR$=$^B_AR^T\to$ B对A的旋转矩阵就相当于A对B的旋转矩阵的转置</li><li>$^A_BR^T$=$^A_BR^{-1}$=$^B_AR\to$ 旋转矩阵的逆矩阵等于它的转置。这个特性非常有用，因为逆矩阵的计算往往需要很大的计算量，有了这个特性，我们就可以很容易的得到旋转矩阵的逆矩阵。</li></ul><h2 id="旋转矩阵的使用"><a href="#旋转矩阵的使用" class="headerlink" title="旋转矩阵的使用"></a>旋转矩阵的使用</h2><p>旋转矩阵除了可以描述B frame相对于A frame的姿态以外，也可以计算向量在不同frame下的坐标。比如有一个在B frame下的向量$^BP$，那么它在A frame下的坐标就可以这样得到: $^AP$=$^A_BR$$^BP$<br>以上的应用都是在已知两个frame的旋转矩阵下进行的，当有一个向量要在同一个frame下沿某个轴转动某个角度时，我们就需要计算出旋转矩阵，计算方式如下：<br>$$<br>R_{ {\hat{X} }_A}(\theta)=<br>    \begin{bmatrix}<br>    1 &amp; 0 &amp; 0 \\<br>    0 &amp; cos\theta &amp; -sin\theta \\<br>    0 &amp; sin\theta &amp; cos\theta<br>    \end{bmatrix}<br>$$$$<br>R_{ {\hat{Y} }_A}(\theta) =<br>    \begin{bmatrix}<br>    cos\theta &amp; 0 &amp; sin\theta \\<br>    0 &amp; 1 &amp; 0 \\<br>    -sin\theta &amp; 0 &amp; cos\theta<br>    \end{bmatrix}<br>$$$$<br>R_{ {\hat{Z} }_A}(\theta) =<br>    \begin{bmatrix}<br>    cos\theta &amp; -sin\theta &amp; 0 \\<br>    sin\theta &amp; cos\theta &amp; 0 \\<br>    0 &amp; 0 &amp; 1<br>    \end{bmatrix}<br>$$<br>例如有点$^AP$对$\hat{X}_A$轴转动$\theta$角度后得到了点$^AP’$,那么点$^AP’$的坐标就是：$$<br>    ^AP’=R_{ {\hat{X} }_A}(\theta)^AP<br>$$注意：点$^AP’$的坐标是基于{A}的，而不是旋转后的坐标{A’}的。</p>]]></content>
      
      
      <categories>
          
          <category> 机械手臂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械手臂 </tag>
            
            <tag> Robotic arm </tag>
            
            <tag> 刚体 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
